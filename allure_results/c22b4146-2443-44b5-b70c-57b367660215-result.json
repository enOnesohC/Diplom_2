{"name": "https://stellarburgers.nomoreparties.site/api/auth/login", "status": "broken", "statusDetails": {"message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\nC:\\Users\\79527\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\requests\\models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = '<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"icon\" href=\"./favicon.ico\"/><meta name=\"viewpo...rc=\"./static/js/2.6a70b014.chunk.js\"></script><script src=\"./static/js/main.9e01cb3c.chunk.js\"></script></body></html>'\ncls = None, object_hook = None, parse_float = None, parse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\nC:\\Users\\79527\\AppData\\Local\\Programs\\Python\\Python310\\lib\\json\\__init__.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x000001A4A07CB5E0>\ns = '<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"icon\" href=\"./favicon.ico\"/><meta name=\"viewpo...rc=\"./static/js/2.6a70b014.chunk.js\"></script><script src=\"./static/js/main.9e01cb3c.chunk.js\"></script></body></html>'\n_w = <built-in method match of re.Pattern object at 0x000001A4A068ADC0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\nC:\\Users\\79527\\AppData\\Local\\Programs\\Python\\Python310\\lib\\json\\decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x000001A4A07CB5E0>\ns = '<!doctype html><html lang=\"en\"><head><meta charset=\"utf-8\"/><link rel=\"icon\" href=\"./favicon.ico\"/><meta name=\"viewpo...rc=\"./static/js/2.6a70b014.chunk.js\"></script><script src=\"./static/js/main.9e01cb3c.chunk.js\"></script></body></html>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nC:\\Users\\79527\\AppData\\Local\\Programs\\Python\\Python310\\lib\\json\\decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_change_parameters.TestUserUpdate object at 0x000001A4A2EB84F0>\ncreate_user = ['tnjtnspc@yandex.ru', 'vmschtgb', 'rygjipuz', 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY2MTk5YTE1OWVkMjgwMDAxYjNlNjY4NyIsImlhdCI6MTcxMjk1Mzg3NywiZXhwIjoxNzEyOTU1MDc3fQ.1etIj6jPEySk_H-8BLw4pKE5bKljkVVoXDRRo0OL3UE']\n\n    @allure.title(\"https://stellarburgers.nomoreparties.site/api/auth/login\")\n    @allure.description(\"Создаём пользователя, получаем токен авторизации, меняем параметры, сравниваем с ожидаемым результатом\")\n    def test_change_parameters_user_is_auth(self, create_user):\n        with allure.step('Формирование тел запросов'):\n            header = \\\n                {\n                    'Authorization': create_user[3]\n                }\n    \n            body = \\\n                {\n                    \"email\": create_user[0],\n                    \"password\": create_user[1],\n                    \"name\": create_user[2]\n                }\n    \n            body_change = \\\n                {\n                    \"email\": create_user[0] + \"1\",\n                    \"password\": create_user[1] + \"1\",\n                    \"name\": create_user[2] + \"1\"\n                }\n        with allure.step('Авторизация'):\n            requests.post(URLS.URL_AUTHORIZATION, json=body, headers=header)\n    \n        with allure.step('Запрос на обновление параметров'):\n            requests.patch(URLS.URL_AUTHORIZATION, json=body_change, headers=header)\n    \n        with allure.step('Получение обновлённых параметров'):\n            responce = requests.get(URLS.URL_AUTHORIZATION, headers=header)\n        assert responce.status_code == 200\n    \n        #responce.json() не работает, ошибка JSONDecodeError\n>       assert responce.json()[\"success\"] is True\n\ntest_api\\tests\\test_change_parameters.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nC:\\Users\\79527\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\requests\\models.py:975: JSONDecodeError"}, "description": "Создаём пользователя, получаем токен авторизации, меняем параметры, сравниваем с ожидаемым результатом", "steps": [{"name": "Формирование тел запросов", "status": "passed", "start": 1712953877731, "stop": 1712953877731}, {"name": "Авторизация", "status": "passed", "start": 1712953877731, "stop": 1712953877969}, {"name": "Запрос на обновление параметров", "status": "passed", "start": 1712953877969, "stop": 1712953878109}, {"name": "Получение обновлённых параметров", "status": "passed", "start": 1712953878109, "stop": 1712953878265}], "start": 1712953877731, "stop": 1712953878266, "uuid": "b3362821-1f72-44ba-b092-ee677dadec34", "historyId": "260ea6e969e4de43449b836eab1b1663", "testCaseId": "260ea6e969e4de43449b836eab1b1663", "fullName": "test_api.tests.test_change_parameters.TestUserUpdate#test_change_parameters_user_is_auth", "labels": [{"name": "parentSuite", "value": "test_api.tests"}, {"name": "suite", "value": "test_change_parameters"}, {"name": "subSuite", "value": "TestUserUpdate"}, {"name": "host", "value": "LAPTOP-KS9V29SF"}, {"name": "thread", "value": "36900-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_api.tests.test_change_parameters"}]}